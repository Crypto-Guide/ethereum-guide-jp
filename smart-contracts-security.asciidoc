= スマートコントラクトのセキュリティ

セキュリティはスマートコントラクトを書くときに最も重要なことの１つです。この章ではセキュリティのベストプラクティスとデザインパターン、そしてセキュリティ上やってはいけないことを紹介します。

他のプログラムと同様に、プログラマーが意図したとおりに正確にいつもスマートコントラクトが実行されることはありません。さらに、スマートコントラクトは公共物のため、誰でもスマートコントラクトとトランザクションを発行することでやり取りをすることができます。何らか脆弱性に晒されれば、回復できない損失を被ることになります。

== セキュリティベストプラクティス

Devensive programmingはスマートコントラクトにとても適したプログラムのスタイルです。以下がベストプラクティスです。

ミニマリズムと簡潔さ::
複雑さはセキュリティの敵です。簡潔であるほどコードは少なくなり、バグや予期しない影響が発生することが少なくなります。スマートコントラクトのコードが少ないかを見るべきであり、少なくする方法を発見しようとするべきです。プロジェクトが数千行のコードをスマートコントラクトで書いているならば、そのプロジェクトのセキュリティに疑問を持つべきです。シンプルであればあるほど、よりセキュアになります。

コードのクオリティ::

スマートコントラクトのコードは厳密でなくてはなりません。あらゆるバグは金銭的損失につながります。スマートコントラクトを一般的なプログラミングと同様にプログラムするべきではありません。SolidityでDAppsを書くのはJavascriptでウィジェットを作るのとワケが違います。むしろ航空宇宙工学のような厳密な開発手法を適用しなければなりません。一旦コードを立ち上げれば、どんな問題も修正することはできません。

読みやすさと監査::

コードは明快で読みやすくてはなりません。読みやすければ、コードの監査もしやすくなります。スマートコントラクトは公開されているので、誰でもバイトコードを読むことが出来ますし、誰でもリバースエンジニアリングが可能です。したがって共同作業やオープンソースの開発手法をとって、コードを公開して開発することは有益です。なぜなら、オープンソース開発の共通点から恩恵を受けたり、開発コミュニティの集合知を活用できるからです。Ethereumコミュニティのスタイルや命名規則を見習って、充実したドキュメントや読みやすいコードを書くべきなのです。

テストカバレッジ::

公開されているスマートコントラクトは誰でもどんなインプットでも実行できます。関数の引数といった入力が適切に構成されている、正しくバインドされている、良質な目的があると決して思い込んではいけません。コードの継続的な実行を許可する前に、すべての引数が適切な形式や想定内かを確認するためにテストしましょう。

== セキュリティリスクとアンチパターン

スマートコントラクトの開発者は共通のセキュリティリスクをよく理解するべきで、そうすればコントラクトがリスクに晒されるプログラムのパターンを発見したり、避けることが可能です。次の章では、様々なセキュリティリスクやどのように脆弱性が生まれるのかの例、そうした脆弱性への対策や予防策を見ていきましょう。

== Reentrancy（リエントランシー）

Ethereumのスマートコントラクトの特徴の１つは他の外部コントラクトからコードを呼び出したり利用できることです。こうした操作はコントラクトが外部呼び出しの発行をする必要があります。こうした外部呼び出しは攻撃者によるハイジャックが可能で、コントラクト内でのコールバックを含めた、さらなるコードの実行を強制します。この種類の攻撃はDAOハックで使われました。

=== 脆弱性

この攻撃の種類はあるコントラクトが知らないアドレスにetherを送るときに発生する。攻撃者はfallback関数内に悪意のあるコードを含む外部アドレスでコントラクトを構築します。したがってあるコントラクトがこのアドレスにetherを送ると、悪意のあるコードが呼び出されます。


== 算術オーバーフローとアンダーフロー

== 予期しないEther

== DELEGATECALL

== エントロピーの錯覚

== 外部コントラクトの参照

== 短いアドレスやパラメータの攻撃

== 未確認な呼び出しの返り値

== 競争条件とフロントランニング

== Dos攻撃

== ブロックタイムスタンプの操作

== Constructors with care

== 初期化していないストレージのポインタ

== 浮動小数点と精度

== コントラクトライブラリ

== 結論
