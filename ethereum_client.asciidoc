[[ethereum_clients_chapter]]
= 第2章 EthereumのClient

[[ethereum_client]]
== EthereumにおけるClient
クライアントとは、Ethereum Networkと通信するためのソフトウェアです。Bitcoinのクライアントは最初にSatoshi Nakamotoによって作られたBitcoin Coreがリファレンスクライアントとして存在していました。

一方で、Ethereumにそのようなリファレンスクライアントはありません。EthereumはYellow paperという技術仕様をまとめた論文が存在しており、それを参考にしてたくさんの主体がクライアントソフトウェアを開発しています。
Ethereum Yellow Paperに書いてある技術仕様に準拠している限り、これらのクライアントは相互に互換性があります。

[[main_client_soft]]
== 主なClient Software

Ethereum Networkには、 Ethereum, Ethereum Classic, Ella, Expanse, Ubiq, MusicoinなどのYellow Paperの技術仕様に準拠した様々なネットワークが存在します。
これらはプロトコルレベルでは互換性があるものの、クライアントソフトにはそれぞれのネットワークごとに微妙に異なる実装が必要になるのです。そんなのにいちいち全部対応していられないため、Ethereumのメインクライアントソフトは以下の6つとされています。

* Parity (実装言語：Rust) 
* Geth(実装言語：Go ) 
* cpp-ethereum(実装言語：C++) 
* pyethereum(実装言語：Python) 
* Mantis(実装言語：Scala) 
* Harmony(実装言語：Java) 

[[full_node_and_remote_client]]
== Full node と Remote client

Ethereumのクライアントは full nodeとremote clientの2種類があります。full nodeはBitcoinのフルノードと同じで、ブロックチェーンの全データを保持し、独立してトランザクション・ブロックの検証作業を行うことができるものです。しかし、フルノードを立てるためには、80–100 GB(2018年9月時点。時間が経つにつれて容量増加)	のデータをローカルストレージに保存しなくてはなりません。
そのため、スマートフォンやIoTデバイスを始めとしたそのような大容量ローカルストレージを持たないデバイスは、remote clientとして動作することになります。

ここで注意しておくべき点は、Ethereumのremote clientは、Bitcoinのlight clientとは異なるという点です。Bitcoinのlight client は、ブロックチェーンのブロックヘッダデータのみを保持し、Merle proofによって受け取った「トランザクションがそのブロックに含まれているかどうか」の検証は独立してすることができます。しかし、これとは対照的にEthereumのremote clientは、ブロックやトランザクションの検証は行わず、完全に自身が通信しているfull nodeを信頼するようになっています。そのため、セキュリティやプライバシーを保ちたい場合にはfull nodeを動かす方が良いです。
また、remote clientは、walletとも意味が異なります。walletはトランザクションを処理する機能を持ちますが、remote nodeはその機能に加えて、API (web3.js APIなど)を提供します。

[[develop_environment_option]]
== Dapp開発時に使用する環境
Dapps開発を行う上では必ずしもEthereum メインネットワークのfull nodeを立てなければいけない訳ではありません。
MetamaskやEmerald Wallet、MyEtherWallet、MyCryptoなどの remote nodeを使うという選択肢もあります。

さらに、開発段階ではメインネット以外にも、PoAアルゴリズムで動いているテストネット、local環境でprivate chainをシュミレーションとして動かせるGanacheや開発用クライアントをホスティングしてくれるinfulaなどを使用することができます。

ここでそれぞれの開発環境のメリット・デメリットを整理して行きます。

==== 1. (メインネットに)フルノードを立てる
===== メリット
* ネットワークの耐障害性や非中央集権性に貢献できる
* 独立してトランザクションの検証ができる
* 仲介者なしにpublic chain 上のコントラクトと通信できる
* 仲介者なしにpublic chain上に直接コントラクトをデプロイできる
* オフラインでもブロックチェーンにあるデータの読み取りができる
* 「自分が欲しい情報がどれか」を第三者に知られることなくデータの読み取りができる

===== デメリット
* ハードウェア性能とインターネット回線性能が必要になる(後述)
* 始めにBlockchainを同期するのに数日はかかる
* オンラインで居続ける必要がある

==== 2. テストネットにノードを立てる
===== メリット
* 2018年4月の時点で10GBほどのデータを同期すれば良い
* 数時間で同期が完了する
* faucetにて無料で入手できるtest etherで、コントラクトのデプロイやトランザクションの作成が可能
* テストネットは一応publilc chainなので自分以外にも沢山のuserとコントラクトが存在している環境であること

===== デメリット
* test etherには価値はないので、「本当に価値のあるものを使用した」時のuserの動きは分からない +
ex.) gasが実質無料である 等

==== 3. localにプライベートネットを立ち上げる
===== メリット
* データの同期もそれを保存するストレージも必要ない
* etherもtest etherも必要ない
* 他のuserはおらず、自分だけ
* 自分がデプロイしたコントラクトしか存在しない

===== デメリット
* 他のuserが存在しないのでpublic chainと同じような環境では全くない +

ex.) +
・トランザクションの競合や順序などが存在しない +
・マイニングするのも自分だけ +
・自分のデプロイしたコントラクトしか存在しないので、既にデプロイされている他のコントラクトを参照して開発することはできない。

==== フルノードを立てるのに必要なリソース

===== 最低限必要なPC仕様：

* 2つ以上のコアを持つCPU
* 少なくとも80 GBの空き容量
* SSD搭載の場合は4GB RAM、HDDの場合は8GB以上
* 8 MBit /秒のダウンロードインターネットサービス

===== 推奨されるPC仕様：

* 4つ以上のコアを備えた高速CPU
* 16 GB以上のRAM
* 少なくとも500 GBの空き容量を持つ高速SSD
* 25+ MBit /秒ダウンロードインターネットサービス

Ethereumのノードを立てるのに必要な空き容量は以下のサイトで確認可能です。 +
https://bitinfocharts.com/ethereum/

[[ethereum_client_software]]
== クライアントソフトを使ってみよう
主なクライアントソフトウェアであるParityとGethを使ってみよう。

==== Parity
Rustで実装されているので、Rust実行環境が必要です。
Install方法や簡単な使用方法はググってみて下さい。

==== go-ethereum (Geth)
Goで実装されているので、Go実行環境が必要です。
Install方法や簡単な使用方法はググってみて下さい。

==== Ethereum Blockchain同期の際の注意点

Ethereumのブロックチェーンは、2016年9月18日に生成されたブロック2,283,397から2016年11月26日に生成されたブロック2,700,031までの間、Dos攻撃を受けています。ここでのDoS攻撃の内容は具体的には、スパムトランザクションによって2000万個以上の空アカウントが作成されるようなものでした。
これによってこの期間のブロックの同期速度は極端に遅くなります。

多くのクライアントソフトではこの期間のブロックを同期せずにスキップするオプションを持っており、Gethの場合は、 -fast というオプションをつけることによって、Parityではデフォルトでそれを実行します。

==== JSON RPC API
Ethereum クライアントソフトは、JSON RPC APIをlocalhostに向けて提供すると考えて下さい。
この時、Portは8545で、セキュリティを高めるためにlocalhostからのアクセスのみを受け入れるようになっています。

gethやparity等のクライアントソフトウェアを実行している状態で
++++
<pre data-type="programlisting">
$ <strong>curl -X POST -H "Content-Type: application/json" --data \
  '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' \
  http://localhost:8545</strong>

{"jsonrpc":"2.0","id":1,
"result":"Geth/v1.8.0-unstable-02aeb3d7/linux-amd64/go1.8.3"}
</pre>
++++

のような形でJSON RPCリクエストを送ることができる。

[[remote_ethereum_client]]
== Ethereum の Remote Client
remote clientは、自身でフルブロックチェーンデータベースを保持しないため、セットアップがとても早く、大容量のストレージを用意する必要もありません。

remote clientは第三者であるフルノードに接続することによって、自身がブロックチェーンデータを持っていなくても以下のような機能を提供するclientです。

* ウォレット内の秘密鍵とアドレスを管理する
* トランザクションを作成・署名・伝搬する
* スマートコントラクトと通信する
* Dappsと通信してブラウザとして機能する
* Block Explorerなどの外部サービスへのリンクを提供する
* 外部から為替レートの情報などを取得する
* web3インスタンスをJavaScriptオブジェクトとしてブラウザに入れ込む
* 他のEthereumノードのRPC APIにアクセスする

remote client の中でもモバイルWalletなどは、このうち一番上のwallet機能だけを持っています。

==== モバイルWallet
Jaxx, Status, Trust Wallet, Cipher Browser 等がある。

==== ブラウザWallet
Metamask, Jaxx, MyEtherWallet, MyCrypto, Mist 等がある。
