= 第4章 Ethereumのトランザクション

== トランザクションとは

トランザクションとはEOA（Externally Owned Account）によって生成された署名付きメッセージのことであり、Ethereumネットワークに伝達され、Ethereumブロックチェーンに記録されます。

トランザクションは状態変化を発生させたり、EVMでコントラクトを実行したりするきっかけになります。Ethereumはグローバルで単一なステートマシンで、トランザクションによってステートを変更します。
Ethereumは自動で動くわけではなく、トランザクションによって起動します。

この章ではトランザクションがどう動くかなどの詳細を追います。

== トランザクションの構造

Nonce（ナンス）:: EOAによって生成される連続する番号。メッセージの複製を防ぐ。

Gas price（ガス代）:: トランザクション生成者が支払うgas代金

Gas limit（ガスの上限）:: トランザクション生成者が支払うgasの最大量

Recipient（受信者）:: 送信先のEthereumアドレス

Value（値）:: 送信先に送るetherの量

Data（データ）:: 可変長のバイナリデータ

v,r,s:: トランザクション生成者によるECDSA電子署名の3つの構成要素

シンプルかつEthereumでバイトパーフェクトになるように作られたRLPというエンコーディング方式でトランザクションのメッセージ構造はシリアライズされます。

Ethereum上のすべての数字は8ビット倍数の長さのbig endian整数としてエンコードされます。

これは実際に伝達されるトランザクション構造ですが、内部や視覚化されたユーザーインターフェースはトランザクションやブロックチェーンから導出される情報を追加したりします。

例えば、EOAを識別するアドレス内に"from（トランザクション送信元）"データはありません。これはEOAの公開鍵はECDSA署名のコンポーネントであるv,r,sから導出でき、アドレスはその公開鍵から導出できるためです。fromフィールドを見かける場合、それはトランザクションを視覚化するソフトウェアによって追加されたものです。

他のメタデータ（ブロック番号、トランザクションID）もソフトウェアによって追加されたものです。こうしたデータはトランザクションから導出されたものであって、トランザクションメッセージそのものの一部ではありません。

== トランザクションのNonce（ナンス）

ナンスは最も重要ですが、最も理解されていないコンポーネントです。

ナンスはブロックチェーン上のアカウントのステートの一部として保存されるわけではなく、アドレスから生成された承認済みトランザクションの数を数えることによって、その都度算出します。

ナンスは次の2つの場合に役立ちます。

* トランザクションが生成された順番
* トランザクションの複製防止

*例）トランザクションが生成された順番*

まずはじめに6etherのトランザクションに署名してブロードキャストし、次に8etherのトランザクションも同様に署名してブロードキャストするとします。

しかし残念なことに、10etherしか保有してないためにネットワークは両方のトランザクションを受け入れることはなく、どちらか一方は失敗します。最初に6etherを送ったので、通常ならば6etherが受け入れられ、8etherの方は拒否されると考えられます。しかしEthereumのような分散システムは、ノードはどちらの順番でもトランザクションを受け取るかもしれません。つまり、すべてのノードが同じ順番にトランザクションを受け取るわけではないのです。そうした場合、あるノードは6etherのトランザクションをはじめに受け取り、また他のノードは8etherのトランザクションをはじめに受け取ることになります。したがって、もしナンスが無いとどちらのトランザクションが受け入れられ、拒否されるかはランダムになってしまいます。

しかしはじめのトランザクションはナンス3を持ち、次の8etherのトランザクションにナンス4を持つというようにナンスが含まれていれば、最初にナンス4の8etherのトランザクションを受け取ったとしても、0〜3までのナンスを持つトランザクションが処理されるまでは無視されます。

*例）トランザクションの複製防止*

例えばあなたが100etherを保有しているとします。そしてオンライン上で2etherを払って欲しいウィジェットを買うとします。あなたのアカウントから彼らのアカウントに2etherを送るトランザクションに署名して、それをイーサリアムネットワークにブロードキャストをして、承認されブロックチェーンに取り込まれるとします。
もしナンスが無ければ、同じアカウントに同じ2etherを送る2回目のトランザクションは初めのトランザクションと全く同じに見えます。これによって、Ethereumネットワーク上のあなたのトランザクションを見る誰でも、オリジナルのトランザクションをコピー&ペーストしてネットワークに再送することで、そのトランザクションをあなたのetherが尽きるまで何度も送ることができます。

しかしトランザクションデータ内にナンスがあれば、同じ量、同じ相手にトランザクションを複数回送ったとしてもすべてのトランザクションはユニークになります。よってトランザクションの一部としてナンスを増加させていけば誰もトランザクションの複製はできなくなります。

ナンスはBitcoinのようなUTXO形式のプロトコルとは対照的に、アカウントベースのプロトコルにとって不可欠です。

=== ナンスの追跡

実際、ナンスはあるアカウントから生成されブロックチェーンに取り込まれたトランザクションの最新の番号です。ナンスを調べるには、次のようにWeb3のインターフェースを利用するなどしてブロックチェーンに問い合わせればできます。

[source]

----
> web3.eth.getTransactionCount("0x9e713963a92c02317a681b9bb3065a8249de124f")
40
----

新しいトランザクションを作成したとき、連続する次のナンスが割り当てられますが、そのトランザクションが承認されるまで"getTransactionCount"のカウントには反映されません。

保留中のトランザクションを数えるためにgetTransactionCountを使用する場合は注意する必要があります。なぜなら、同時にいくつかのトランザクションを送信する場合、何らかの問題が発生するかもしれないからです。

例を確認しましょう。

[source]

----
> web3.eth.getTransactionCount("0x9e713963a92c02317a681b9bb3065a8249de124f", \
"pending")
40
> web3.eth.sendTransaction({from: web3.eth.accounts[0], to: \
"0xB0920c523d582040f2BCB1bD7FB1c7C1ECEbdB34", value: web3.toWei(0.01, "ether")});
> web3.eth.getTransactionCount("0x9e713963a92c02317a681b9bb3065a8249de124f", \
"pending")
41
> web3.eth.sendTransaction({from: web3.eth.accounts[0], to: \
"0xB0920c523d582040f2BCB1bD7FB1c7C1ECEbdB34", value: web3.toWei(0.01, "ether")});
> web3.eth.getTransactionCount("0x9e713963a92c02317a681b9bb3065a8249de124f", \
"pending")
41
> web3.eth.sendTransaction({from: web3.eth.accounts[0], to: \
"0xB0920c523d582040f2BCB1bD7FB1c7C1ECEbdB34", value: web3.toWei(0.01, "ether")});
> web3.eth.getTransactionCount("0x9e713963a92c02317a681b9bb3065a8249de124f", \
"pending")
41
----

このように、初めに送ったトランザクションはトランザクション数を41に増やしましたが、その後連続して3つのトランザクションを送って、getTransactionCountを呼び出してもカウントされませんでした。メモリプールには3つの保留中のトランザクションがあるのにもかかわらず、１つしかカウントされていないのです。ただ決済が完了するのを数秒待っていれば、getTransactionCountを呼び出して期待通りの値が帰ってくるでしょう。

トランザクションを構築するようなアプリケーションを作る際は、保留中のトランザクションのためにgetTransactionCountには頼らないほうがよいでしょう。

=== ナンスの欠落と複製と承認

もしプログラムでトランザクションを作成しているならば、ナンスの追跡は重要です。特に、複数の独立した処理からトランザクションの生成をしているなら尚更です。

Ethereumネットワークはナンスの順にトランザクションを処理しています。もしナンス0のトランザクションを送って、その後ナンス2のトランザクションを送ると２つ目のトランザクションはどのブロックにも含まれることはありません。Ethereumネットワークが欠けているナンスを持つトランザクションを待っている間、ナンス2のトランザクションはメモリプールに保管されます。すべてのノードは欠けているナンスは単に遅延しているか、ナンス２のトランザクションを順番を前後して受け取ったと想定します。もし欠けているナンス1を持つトランザクションを送ったら、ナンス1、ナンス2のトランザクション両方とも処理され、正当なら取り込まれます。一旦欠けているナンスを満たせば、 ネットワークはメモリプール内にある順番通りでなかったトランザクションをマイニングします。

これが意味するのは、もしあなたが連続するトランザクションを作成し、そのうち１つがどのブロックにも取り込まれない場合、その欠けたナンスを待つために、後に続くすべてのトランザクションは行き詰るということです。不当であったりガス不足によって、意図せず連続するナンスの欠落が発生することがあります。トランザクションの行き詰まりを解消するために、欠けているナンスのトランザクションを送る必要があります。欠けたナンスを持つトランザクションがネットワークで検証されるか、後に続くナンスを持つブロードキャストされたトランザクションがすべて正当となるかを同様に注意するべきです。トランザクションを取り消すことはできないからです。

一方、意図せずナンスを複製して、ナンスが同じで受取人もしくは値が異なるトランザクションを２つ送ってしまった場合、そのうち１つは承認されますが、もう一つは拒否されます。どちらが承認されるかは検証ノードがどちらを先に受け取るかの順番で決まり、それはランダムです。

したがってナンスの追跡は必要であり、アプリケーションが正しくプロセスを管理しない場合、問題が生じます。

=== 並列実行、トランザクション生成とナンス

並列実行はコンピュータサイエンスの複雑な面であり、予想外な動きをすることがあります。Ethereumのような分散型のリアルタイムシステムの場合は特にです。

トランザクションを生成する複数の別々のウォレットを持っていると考えてみましょう。例としては、取引所のホットウォレットから出金処理するというような場合があります。この場合理想としては、単一障害点にならないように複数のコンピュータで出金処理をしたいです。しかし複数のコンピュータから同時に出金処理をすることで並列性の問題が発生します。同じホットウォレットアカウントからトランザクションの生成、署名、ブロードキャストをする複数のコンピュータはどのように協調すればよいでしょうか。

１つのコンピュータを使ってトランザクションに署名するコンピュータに先着順にナンスを割り当てることはできます。しかしこのコンピュータはこの場合単一障害点です。最悪、もしいくつかのナンスが割り当てられそのうち１つでも何らかの不具合で使用することが出来なくなった場合、後に続く全てのトランザクションは行き詰ることになります。

もう１つのトランザクションを生成する方法としてナンスを割り当てないというのがあります。（つまり署名をしないままにするということ。ナンスはトランザクションデータの一部なので電子署名するときに含まれる必要がある。）未署名トランザクションに署名する単一のノードにキューを出し、ナンスを追跡することができます。しかしこのトランザクションの署名とナンス追跡は負荷の下で混雑する可能性のあるプロセスであり、ネックがあります。一方未署名トランザクションを生成を並列化する必要はありません。この方法は並列処理する部分があるものの、重要な部分が並列処理されていません。

== トランザクションのGas（ガス）

Gas代の役割とトランザクションの構成要素としてのGas上限について確認しましょう。

GasはEthereumを動かす燃料であり、etherではありません。Gasはetherに対して交換比率をもつ別の仮想通貨です。Ethereumはトランザクションが使用することのできるリソースの量を管理するためにGasを使用します。またDos攻撃や悪意のあるリソースを食いつぶすトランザクションを避けるためにも必要です。

トランザクション内のgasPriceフィールドにはトランザクション生成者が払うつもりのある額を設定できます。その値段はgasあたりのweiで計られます。

ウォレットはトランザクションの承認が早くなるようにgasPriceを調整することができます。gasPriceが高いほど、より早くトランザクションは承認され、反対に価格が低いと遅くなります。gasPriceを設定できる最小値は0で、それは手数料無料のトランザクションです。需要が低く、ブロック内に空きがある場合に、そうしたトランザクションはマイニングされる可能性があります。

gasに関連する次に重要なフィールドはgasLimitです。簡単に言うと、gasLimitはトランザクション生成者が払うつもりのあるgas代の最大値です。

もしトランザクションアドレスの送信先がコントラクトならば、必要なgasの量を正確ではないが見積もることができます。なぜならコントラクトは実行するパスが違うと異なる状況という評価になり、かかるgasの合計が異なるからです。

コントラクトはシンプルな計算を実行するかもしれないし、複雑な計算を実行するかもしれません。それは我々の操作できない状況に依存し、予測することもできません。

実際に例を考えてみましょう。私たちは呼び出されるたびに数字をカウントしていくシンプルなコントラクトを記述したとします。100回目を呼び出すと宝くじのように特別な賞金を渡す場合、賞金を算出する追加的な計算が必要になります。

車の燃料タンク容量をgasLimitだと考えると良いと思います。走るために必要だと考えるgasの量をタンクに入れますね。この時、ある程度必要な燃料の量を見積もることはできますが、より複雑な実行パスに変更される場合があり、その場合gasの消費量は増加してしまいます。

この燃料タンクの類推はやや誤解を招きます。実際には旅行が終わった後に使った分だけ支払うガソリンスタンドのクレジットアカウントのようなものです。トランザクションを送るとき、最初の検証の段階でgasPriceとgas手数料を支払う余裕のあるアカウントかどうかが確認されます。しかしその量がアカウントからトランザクションの実行が完了するまで差し引かれるわけではありません。トランザクションによって実際に消費された分だけのgasが請求されますが、トランザクションを送信する前に払うつもりのある最大量の残高は保有している必要があります。

== トランザクションの受信者

トランザクションの受信者はtoフィールドに指定します。ここには20バイトのEthereumアドレスが入ります。そのアドレスはEOAかコントラクトのアドレスです。

Ethereumはこのフィールドの検証はしません。20バイトの値はなんであろうと正当と見なされます。20バイトの値が秘密鍵やコントラクトに対応していないアドレスだとしてもそのトランザクションは正当です。Ethereumはアドレスが存在している公開鍵から生成されたものかどうかを判別する方法がありません。

誤ったアドレスにトランザクションを送ると、送信したetherをburn（二度と取り出せなく）することになります。なぜならほとんどのアドレスは秘密鍵が知られていないので、使用しようとしても署名できないからです。

ただ正当なアドレスでもそうしたことは起こります。実際、Payment channelやコントラクトにおいて不正を防ぐためなどの多くの正当な理由でetherをburnします。またetherの量は有限なため、効率的にetherをburnすることはburnした価値をすべてのether保有者に分配することになります。

== トランザクションの値とデータ

トランザクションの主なpayloadはvalue(送金するetherの額)とdata(送信する何らかのデータ)の２つのフィールドを含んでいます。トランザクションはvalueとdataを両方持つこともあるし、valueだけ、dataだけ、valueもdataもない場合もあります。これら4つのパターンはいずれも正当です。

valueだけをもつトランザクションはpayment（支払い）です。dataだけを持つトランザクションはinvocation（呼び出し）です。両方をもつトランザクションはpaymentかつinvocationです。どちらもないトランザクションはただのgasの無駄遣いですが可能です。

=== EOAやコントラクトにvalueを送る

valueだけを送るトランザクションはpaymentで、送信先がコントラクトかどうかで振る舞いが全く異なります。

EOAアドレスの場合、Ethereumは状態の変化を記録してアドレスの残高に送信した値を追加します。

コントラクトアドレスの場合、EVMはコントラクトを実行してトランザクション内のpayloadデータにある名前の関数を呼び出そうとします。トランザクションにdataがない場合、EVMはfallback関数を呼び出し、もしその関数がpayableならば次になにをするかを決定するためにその関数を実行します。もしfallback関数がないなら、ウォレットへの支払いのようにコントラクトの残高を増やします。

コントラクトは関数が呼び出されたときに例外を発生させるか、関数にコーディングされた条件次第で、入金を拒否することができます。関数が正常に終了すれば、コントラクトの状態は更新され残高の増加が反映されます。

=== EOAやコントラクトにdataを送る

トランザクションがdataを含む場合、ほとんどがコントラクトアドレスに向けたものです。しかしEOAにdataを送れないわけではありません。Ethereumプロトコルにとってそれは正当ですが、その場合dataの解釈はEOAにアクセスするために使用するウォレットまででEthereumプロトコルには無視されます。さらにほとんどのウォレットはEOAへのトランザクション内のdataを同様に無視します。しかしながら、将来的には標準としてウォレットがコントラクトのようにdataを解釈することが可能になります。それによって、トランザクションによってユーザーウォレット内の関数を呼び出せるようになります。決定的な違いはEOAによるdata payloadの解釈はコントラクトの実行とは異なりEthereumのコンセンサスルールに従わなくてよいということです。

現在、トランザクションがコントラクトアドレスにdataを送る場合を考えましょう。その場合、コントラクト呼び出しとしてEVMによって解釈されます。ほとんどのコントラクトは特に関数呼び出しとしてこのdataを使用し、名前付き関数を呼び、エンコードされた引数を関数に渡します。

ABI対応のコントラクトに送られたdata payloadは16進数にシリアライズエンコードされています。

A function selector:: 関数プロトタイプをKeccak-256でハッシュ化した最初の4バイト。どの関数を呼び出そうとしているかを識別するため。

The function arguments:: ABI仕様で定義された様々な基本的なルールに従ってエンコードした関数の引数

== コントラクトを作成する特殊なトランザクション

ブロックチェーン上に新しいコントラクトを作成するトランザクションは特殊なケースです。コントラクト作成のトランザクションはzero addressと呼ばれる特殊な送信先に送ります。コントラクトを登録するトランザクション内のtoフィールドには0x0アドレスを含みます。これはEOAでもコントラクトでもありません。etherを支払ったり、トランザクションの生成をすることは出来なく、コントラクトの作成のための送信先としてのみ使用されます。

zero addressがコントラクト作成のためのアドレスとしてのみ意図されている一方、様々アドレスから支払いを受け取ることがあります。これは２つの場合があると考えられます。１つは単なるアクシデントでetherを失います。もう１つはetherのburnですが、もしburnしたいならネットワークにその意図を明確にするべきであり、代わりにburnするためのアドレスを使うべきです。

コントラクト作成トランザクションはコントラクトを作成するコンパイルされたバイトコードを含むdata payloadだけが必要です。このトランザクションによってコントラクトは作成されます。もし開始時の残高を新しいコントラクトに設定したいならばvalueにetherを含むことが出来ますが、あくまでオプションです。data payloadなしでvalueのみをコントラクト作成アドレスに送るなら、それはburnするのと同じです。

== 電子署名

この章では電子署名がどのように動くのか、秘密鍵を明かすことなく秘密鍵の所有を証明するためにどう電子署名が使われているかを見ていきましょう。

=== ECDSA（The Elliptic Curve Digital Signature Algorithm）

Ethereumは電子署名にECDSAを使用しています。ECDSAは楕円曲線暗号を元にしています。電子署名はEhereumでは３つの目的があります。まず署名は秘密鍵を所有していること、すなわちetherの支払いやコントラクトの実行をする権限を持つEthereumアカウントの所有者が誰かというを証明します。２つ目に、権限の証明を否定できないという否認防止を保証します。３つ目に、トランザクションが署名された後に誰もトランザクションデータを変更できない、していないことを証明します。

=== 実際のトランザクション署名

正当なトランザクションを生成するには、生成者はメッセージにECDSAを使用して電子署名をしなければなりません。トランザクションに署名すると言うとき、実際にはトランザクションデータをRLPでシリアライズしたKeccak-256ハッシュに署名することを意味します。したがって、署名はトランザクションそのものではなく、トランザクションデータのハッシュに適用します。

Ethereumでトランザクションに署名する場合、生成者は以下のことをする必要があります。

1. nonce, gasPrice, gasLimit, to, value, data, chainID, 0, 0といった9つのフィールドを持つトランザクションのデータ構造を作ります。

2. そのトランザクションのデータ構造をRLP-encodedでシリアライズしたメッセージを作ります。

3. そのシリアライズしたメッセージのKeccak-256ハッシュを計算します。

4. 生成者のEOAの秘密鍵でハッシュに署名するECDSA署名をします。

5. ECDSA署名で算出したv, r, sの値をトランザクションに追加します。

特殊な署名変数であるvはECDSA recover関数が署名を確認するのを支援するrecovery識別子とchainIDの２つを示します。これは27か28、またはchainIDが2倍になった35か36として算出されます。

=== EIP-155に沿ったトランザクション作成

"Simple Replay Attack Protection"であるEIP-155規格は署名する前にトランザクションデータ内にchainの識別子を含む、リプレイアタックを防止するトランザクションエンコードを指定します。これはあるブロックチェーン上に作られたトランザクションがその他のブロックチェーンでは無効になることを保証します。したがって、あるネットワーク上にブロードキャストされたトランザクションを他のネットワーク上で繰り返すことはできません。

EIP-155は主な6つのトランザクションデータ構造のフィールドにchain識別子と0と0の3つを追加します。この3つのフィールドはエンコードされたり、ハッシュ化される前のトランザクションデータに追加されます。よってそれらは後で署名が適用されるトランザクションのハッシュ値を変えます。署名されるデータにchain識別子を含むことによって、もしchain識別子が変更されても署名が無効になるため、トランザクション署名は変更を防ぎます。よって、署名の正当性がchain識別子に依存しているため、EIP-155はトランザクションが他のチェーンで繰り返されることを不可能にします。

.Chain識別子
|==========
|チェーン|チェーンID
|Ethereum メインネット|1
|Morden（使われていない）|2
|Ropsten|3
|Rinkeby|4
|Rootstock メインネット|30
|Rootstock テストネット|31
|Ethereum Classic メインネット|61
|Ethereum Classic テストネット|62
|Geth プライベートテストネット|1337
|==========

== 署名のPrefix値vと公開鍵の回復

トランザクション構造を見ると分かるように、トランザクションメッセージは"from"フィールドを含みません。そのため生成者の公開鍵がその都度ECDSA署名から算出しています。公開鍵を持っているなら、簡単にアドレスを算出できます。署名者の公開鍵を回復する処理をpublic key recoveryと呼びます。

== 署名と送信の分離（オフライン署名）

トランザクションに署名すれば、Ethereumネットワークに送信する準備が整います。通常は、トランザクションの作成、署名、送信の3つのステップは１つの操作として発生します。しかし、トランザクションの作成と署名は2つのステップに分けることができます。そして署名済みのトランザクションを持っているならば、web3.eth.sendSignedTransactionを使用してEthereumネットワークに送信することができます。

トランザクションの署名と送信を分ける理由として、セキュリティが挙げられます。トランザクションに署名するコンピュータはロックされてない秘密鍵をメモリ内で読み込む必要があります。トランザクションを送信するコンピュータはインターネットに接続されてる必要があります。もしこうした２つの処理を１つのコンピュータで行う場合、オンラインシステム上で秘密鍵を保有する必要があり、かなり危険です。異なるマシンで署名や送信の処理を行うように分けることはoffline signingと呼ばれ、一般的なセキュリティ事例です。

Ethereumトランザクションのオフライン署名の処理を確認しましょう。

1. 特にナンスや利用可能な金額といった現在のアカウントの状態を取得できるオンラインのコンピュータで未署名のトランザクションを作成します。

2. QRコードやUSBなどを介して、トランザクションの署名のために未署名トランザクションをオフラインデバイスに送信します。

3. QRコードやUSBなどを介して、トランザクションをEthereumブロックチェーンにブロードキャストするためにオンラインのデバイスに署名済みトランザクションを送ります。

必要とするセキュリティのレベルによって、隔離されファイアーウォールなサブネット（オンラインだが分離されている）からair-gappedシステムという完全にオフラインという範囲まで、オフライン署名のコンピュータはオンラインのコンピュータからどれくらい隔離するかの程度を変えることができます。

air-gappedシステムでは、オンライン環境から完全に隔離されており、全くネットワークとは繋がっていません。トランザクションに署名をするには、オフラインからQRコードなどで送る必要があります。つまり署名したいトランザクションすべてを手動で送らなければいけないので、取引できる規模はどうしても小さくなってしまいます。

ほとんどの環境は完全なair-gappedシステムを利用しておらず、少しの分離で重要なセキュリティを確保します。例えば、message-queueプロトコルのみ許可するファイアーウォールを備える分離されたサブネットは、攻撃されるリスクを軽減し、オンラインシステムで署名するよりもかなり高いセキュリティを確保できます。多くの企業はこのためにZeroMQのようなプロトコルを使用します。

== トランザクションの伝搬

Ethereumネットワークは"flood routing"プロトコルを使用しています。EthereumクライアントはP2Pネットワーク（理想はフルメッシュ）内のノードとして振る舞います。ネットワークのノードに特別なものはなく、どれも同等のノードとして振る舞います。

トランザクションの伝搬は署名済みトランザクションを作る（またはオフラインから受け取る）Ethereumノードから始まります。そのトランザクションは検証され、発信元のノードと直接つながる他のすべてのEthereumノードに送信されます。平均的に、それぞれのEthereumノードは最低13のノード（neighbor）との接続を維持します。それぞれのneighborノードはトランザクションを受け取ったらすぐに検証します。そして正当なら、複製を保存してさらに他のすべてのneighborノードに伝搬します。結果的に発信元のノードから出たトランザクションはネットワーク上のすべてのノードがそのトランザクションの複製を持つまでネットワークを流れます。

ノードは伝搬するメッセージを選別することが可能ですが、デフォルトでは受け取った正当なトランザクションメッセージのすべてを伝搬します。

数秒以内にEthereumトランザクションは世界中のノードに伝搬されます。各ノードからはそのトランザクションの発信元を識別することはできません。トランザクションの発信元を追跡したり、伝搬を妨げるには攻撃者はかなりの割合のノードを支配する必要があります。これはP2Pネットワークのセキュリティとプライバシー設計の一部です。

== ブロックチェーンに記録する

Ethereumのすべてのノードは同等のピアである一方、いくつかはminerによって操作されており、高いパフォーマンスのGPUを搭載するコンピュータであるマイナーファームにトランザクションやブロックを提供しています。マイニングするコンピュータは候補ブロックにトランザクションを追加し、候補ブロックを正当にするproof of workを見つけようとします。

簡単に言うと、正当なトランザクションはブロックに含まれ、Ethereumブロックチェーンに記録されます。ブロックがマイニングされると、アカウントの残高を変更したり、内部状態を変更するコントラクトを呼び出すことによって、トランザクションはEthereum単一の状態を変更します。これらの変更はeventsも含むトランザクションのreceiptの形でトランザクションに沿って記録されます。

EOAによる署名を通じた作成や伝搬、そして最終的にマイニングするという道のりを完了したトランザクションが単一の状態を変更し、消えない印をブロックチェーンに残します。

== マルチシグトランザクション

Bitcoinのスクリプト機能に慣れているなら、複数がトランザクションに署名するときだけ支払いができるBitcoinのマルチシグアカウントを作成できることを知っているでしょう。Ethereumの基本的なEOAのvalueトランザクションはマルチシグのための規定がありません。しかし、考えられるあらゆる条件のスマートコントラクトによってetherやトークンの移転を扱うための任意の署名の制限を強制することができます。

この機能を利用するには、マルチシグの条件や支払い制限のような必要な支払いルールがプログラムされたウォレットコントラクトにetherを移行する必要があります。支払い条件を満たした権限のあるEOAのによって促されたときにウォレットコントラクトは資金を送金します。例えば、マルチシグの条件下でetherを守るには、マルチシグコントラクトにetherを移転します。

スマートコントラクトとしてマルチシグのトランザクションを実装できるというのはEthereumの柔軟性を表しています。しかし諸刃の剣であり、余計な柔軟性はマルチシグのセキュリティを台無しにするバグを発生させるでしょう。実際に、少なくとも簡単なM-of-Nのマルチシグのようなコントラクトを必要としなくなるEVM上でのマルチシグコマンドを作成する提案がたくさんあります。これはコアコンセンサスルールの一部であり堅牢性と安全性が証明済みのBitcoinのマルチシグシステムと同様です。

== 結論
トランザクションはEthereumシステムであらゆる動作の起点です。トランザクションはEVMがコントラクトを見積もったり、残高を更新したり、Ethereumブロックチェーンの状態を一般的に変更するきっかけとなる入力なのです。
